pipeline {
    agent any

    environment {
        SERVER_URL_PRODUCTION = 'https://example.com'
    }

    options {
        disableConcurrentBuilds()
    }

    stages {
        // stage('Install Dependencies') {
        //     steps {
        //         script {
        //             // Create a virtual environment and install dependencies within it
        //             sh """
        //                 python3 -m venv venv
        //                 source venv/bin/activate
        //                 pip install --upgrade pip
        //                 pip install openai
        //             """
        //         }
        //     }
        // }

        stage('Development') {
            when {
                branch 'dev'
            }
            steps {
                script {
                    env.TAG = 'development'
                    env.ENV_FILE = "${env.ENV_DEV}"
                    env.SERVER_USERNAME = "${env.SERVER_USERNAME_DEV}"
                    env.SERVER_URL = "${env.SERVER_URL_DEV}"
                    env.SERVER_SSH_KEY_FILE = "${env.SERVER_SSH_KEY_FILE_DEV}"
                }

                echo "BUILD_ENV: dev"
                echo "TAG: $TAG"
            }
        }

        stage('Copilot Review') {
            steps {
                script {
                    // Use OpenAI API key securely from Jenkins credentials
                    withCredentials([string(credentialsId: 'OPENAI_API_KEY', variable: 'OPENAI_API_KEY')]) {
                        sh """
                            chmod +x ./jenkins/scripts/copilot_review.py &&
                            export OPENAI_API_KEY=${OPENAI_API_KEY}
                            source venv/bin/activate
                            python3 ./jenkins/scripts/copilot_review.py || echo "No review generated."
                        """
                    }
                }
            }
        }

        stage('Build') {
            steps {
                sh 'chmod +x ./jenkins/scripts/build.sh && ./jenkins/scripts/build.sh'
            }
        }

        stage('Deploy') {
            when {
                anyOf {
                    branch 'main'
                    branch 'dev'
                }
            }
            steps {
                script {
                    sh 'chmod +x ./jenkins/scripts/deploy.sh && ./jenkins/scripts/deploy.sh'
                }
            }
        }
    }

    post {
        always {
            script {
                def review = sh(
                    script: "grep -A 1 'Suggested Review' ./jenkins/scripts/copilot_output.txt | tail -n 1",
                    returnStdout: true
                ).trim()

                def changeLog = getChangeString()

                def color = COLOR_MAP.get(currentBuild.currentResult, 'warning')

                slackSend(
                    channel: '#notification-jenkins',
                    color: color,
                    message: """`test jenkins` - *${currentBuild.currentResult}*
                    Changes:
                    ${changeLog}

                    Suggested Review:
                    ${review}
                    """
                )
            }
        }
    }
}

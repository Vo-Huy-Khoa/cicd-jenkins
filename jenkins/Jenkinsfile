pipeline {
  agent any

  environment {
    GITHUB_TOKEN = credentials('GITHUB_TOKEN')       // GitHub PAT
    GROQ_API_KEY = credentials('GROQ_API_KEY')       // Thêm token Groq vào Jenkins credentials
  }

  stages {
    stage('Checkout') {
      steps {
        checkout scm
      }
    }

    stage('Get PR Diff') {
      steps {
        sh 'git fetch origin +refs/pull/*/head:refs/remotes/origin/pr/*'
        script {
          env.DIFF = sh(script: 'git diff origin/main', returnStdout: true).trim()
        }
      }
    }

    stage('Ask Groq for Code Review') {
      steps {
        script {
          def payload = [
            model: "llama3-8b-8192",
            messages: [
              [role: "system", content: "Bạn là AI code reviewer."],
              [role: "user", content: "Hãy review đoạn diff sau:\n" + env.DIFF]
            ]
          ]

          try {
            def response = httpRequest(
              httpMode: 'POST',
              url: 'https://api.groq.com/openai/v1/chat/completions',
              customHeaders: [
                [name: 'Authorization', value: "Bearer ${env.GROQ_API_KEY}"],
                [name: 'Content-Type', value: 'application/json']
              ],
              requestBody: groovy.json.JsonOutput.toJson(payload),
              validResponseCodes: '200'
            )

            def body = new groovy.json.JsonSlurper().parseText(response.content)
            env.REVIEW_COMMENT = body.choices[0].message.content
            echo env.REVIEW_COMMENT
          } catch (Exception e) {
            error "Groq API request failed"
          }
        }
      }
    }
  }
}
def COLOR_MAP = ['SUCCESS': 'good', 'FAILURE': 'danger', 'UNSTABLE': 'warning', 'ABORTED': 'danger']

@NonCPS
def getChangeString() {
    MAX_MSG_LEN = 100
    def changeString = ""
    echo "Gathering SCM changes"
    def changeLogSets = currentBuild.rawBuild.changeSets
    for (int i = 0; i < changeLogSets.size(); i++) {
        def entries = changeLogSets[i].items
        for (int j = 0; j < entries.length; j++) {
            def entry = entries[j]
            truncated_msg = entry.msg.take(MAX_MSG_LEN)
            if (!truncated_msg.contains(',')) {
                changeString += " - ${truncated_msg}\n"
            }
        }
    }
    if (!changeString) {
        changeString = " - No new changes"
    }
    return changeString
}

pipeline {
    agent any

    environment {
        SERVER_URL_PRODUCTION = 'https://example.com'
        OPENAI_API_KEY = credentials('OPENAI_API_KEY')
        // Ensure pipx environment is available to Jenkins
        PATH = "/root/.local/pipx/venvs/openai/bin:${env.PATH}"
    }

    options {
        disableConcurrentBuilds()
    }

    stages {
        stage('Development') {
            when {
                branch 'dev'
            }
            steps {
                script {
                    env.TAG = 'development'
                    env.ENV_FILE = "${env.ENV_DEV}"
                    env.SERVER_USERNAME = "${env.SERVER_USERNAME_DEV}"
                    env.SERVER_URL = "${env.SERVER_URL_DEV}"
                    env.SERVER_SSH_KEY_FILE = "${env.SERVER_SSH_KEY_FILE_DEV}"
                }

                echo "BUILD_ENV: dev"
                echo "TAG: $TAG"
            }
        }

        stage('Build') {
            steps {
                sh 'chmod +x ./jenkins/scripts/build.sh && ./jenkins/scripts/build.sh'
            }
        }

        stage('AI Code Review') {
            steps {
                script {
                    // Ensure python3 and the code review script have execute permissions
                    sh 'chmod +x /root/.local/pipx/venvs/openai/bin/python3'
                    sh 'chmod +x ./jenkins/scripts/code_review.py'

                    // Fetch the latest code changes
                    sh "git fetch origin"

                    // Run the AI code review script using the Python from pipx environment
                    def review = sh(
                        script: """
                            git diff origin/main...HEAD > diff.txt || true
                            pipx run openai ./jenkins/scripts/code_review.py < diff.txt
                        """,
                        returnStdout: true
                    ).trim()
                    echo "===================AI Code Review Result: ${review}"
                    env.AI_REVIEW_RESULT = review
                }
            }
        }

        stage('Deploy') {
            when {
                anyOf {
                    branch 'main'
                    branch 'dev'
                }
            }
            steps {
                script {
                    sh 'chmod +x ./jenkins/scripts/deploy.sh && ./jenkins/scripts/deploy.sh'
                }
            }
        }
    }

    post {
        always {
            script {
                // If AI review didn't run, provide a default message
                def reviewMsg = env.AI_REVIEW_RESULT ?: "No AI review generated."

                slackSend channel: '#notification-jenkins',
                    color: COLOR_MAP[currentBuild.currentResult],
                    message: """*Build Result:* ${currentBuild.currentResult}
    *Changes:* 
    ${getChangeString()}
    *AI Code Review:*
    ${reviewMsg}
    """
            }
        }
    }
}

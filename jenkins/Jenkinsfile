def COLOR_MAP = [
    'SUCCESS' : 'good',
    'FAILURE' : 'danger',
    'UNSTABLE': 'danger',
    'ABORTED' : 'warning'
]

@NonCPS
def getChangeString() {
    def MAX_MSG_LEN = 100
    def changeString = ""
    echo "Gathering SCM changes"
    def changeLogSets = currentBuild.rawBuild.changeSets

    for (int i = 0; i < changeLogSets.size(); i++) {
        def entries = changeLogSets[i].items
        for (int j = 0; j < entries.length; j++) {
            def entry = entries[j]
            def truncated_msg = entry.msg.take(MAX_MSG_LEN)
            if (!truncated_msg.contains(',')) {
                changeString += " - ${truncated_msg}\n"
            }
        }
    }

    return changeString ?: " - No new changes"
}

pipeline {
    agent any

    environment {
        SERVER_URL_PRODUCTION = 'https://example.com'
    }

    options {
        disableConcurrentBuilds()
    }

    stages {

        stage('Development') {
            when {
                branch 'dev'
            }
            steps {
                script {
                    env.TAG = 'development'
                    env.ENV_FILE = "${env.ENV_DEV}"
                    env.SERVER_USERNAME = "${env.SERVER_USERNAME_DEV}"
                    env.SERVER_URL = "${env.SERVER_URL_DEV}"
                    env.SERVER_SSH_KEY_FILE = "${env.SERVER_SSH_KEY_FILE_DEV}"
                }

                echo "BUILD_ENV: dev"
                echo "TAG: $TAG"
            }
        }

        stage('Copilot Review') {
            steps {
                script {
                    sh 'chmod +x ./jenkins/scripts/copilot_review.sh'
                    sh './jenkins/scripts/copilot_review.sh > ./jenkins/scripts/copilot_output.txt'
                    sh 'cat ./jenkins/scripts/copilot_output.txt || echo "copilot_output.txt not found!"'
                }
            }
        }

        stage('Build') {
            steps {
                sh 'chmod +x ./jenkins/scripts/build.sh && ./jenkins/scripts/build.sh'
            }
        }

        stage('Deploy') {
            when {
                anyOf {
                    branch 'main'
                    branch 'dev'
                }
            }
            steps {
                script {
                    sh 'chmod +x ./jenkins/scripts/deploy.sh && ./jenkins/scripts/deploy.sh'
                }
            }
        }
    }

    post {
        always {
            script {
                def review = sh(
                    script: "tail -n 5 ./jenkins/scripts/copilot_output.txt || echo 'No review found.'",
                    returnStdout: true
                ).trim()

                def changeLog = getChangeString()
                def color = COLOR_MAP.get(currentBuild.currentResult, 'warning')

                echo "Slack Message Preview:"
                echo "Changes:\n${changeLog}"
                echo "Review:\n${review}"

                slackSend(
                    channel: '#notification-jenkins',
                    color: color,
                    message: """`test jenkins` - *${currentBuild.currentResult}*
Changes:
${changeLog}

Suggested Review:
${review}
"""
                )
            }
        }
    }
}

def COLOR_MAP = ['SUCCESS': 'good', 'FAILURE': 'danger', 'UNSTABLE': 'danger', 'ABORTED': 'danger']

@NonCPS
def getChangeString() {
    def changeString = ""
    echo "Gathering Git changes manually"

    if (env.CHANGE_ID) {
        changeString = sh(
            script: """
                git fetch origin
                git log --pretty=format:" - %s" origin/${env.CHANGE_TARGET}..origin/pr/${env.CHANGE_ID}
            """,
            returnStdout: true
        ).trim()
    } else {
        def changeLogSets = currentBuild.rawBuild.changeSets
        for (int i = 0; i < changeLogSets.size(); i++) {
            def entries = changeLogSets[i].items
            for (int j = 0; j < entries.length; j++) {
                def entry = entries[j]
                truncated_msg = entry.msg.take(MAX_MSG_LEN)
                if (!truncated_msg.contains(',')) {
                    changeString += " - ${truncated_msg}\n"
                }
            }
        }
        changeString += "\nURL: http://ec2-54-169-122-225.ap-southeast-1.compute.amazonaws.com/"
    }

    if (!changeString) {
        changeString = " - No new changes"
    }

    return changeString
}

def isPullRequest() {
    return env.CHANGE_ID != null
}

pipeline {
    agent any

    environment {
        SERVER_USERNAME = credentials('SERVER_USERNAME')
        SERVER_URL = credentials('SERVER_URL')
        SERVER_SSH_KEY_FILE = credentials('SERVER_SSH_KEY_FILE')
        SERVICE_NAME = credentials('SERVICE_NAME')
        ENV_DEV = credentials('ENV_DEV')

        GITHUB_TOKEN = credentials('GITHUB_TOKEN')
        GROQ_API_KEY = credentials('GROQ_API_KEY')
    }

    options {
        disableConcurrentBuilds()
    }

    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }

        stage('Determine Build Type') {
            steps {
                script {
                    if (isPullRequest()) {
                        echo "This is a Pull Request build"
                        env.BUILD_TYPE = 'pr'
                    } else {
                        echo "This is a branch build"
                        env.BUILD_TYPE = 'branch'
                    }
                }
            }
        }

        stage('Development') {
            when {
                branch 'dev'
            }
            steps {
                script {
                    env.TAG = 'development'
                    env.ENV_FILE = "${env.ENV_DEV}"
                    env.SERVER_USERNAME = "${env.SERVER_USERNAME_DEV}"
                    env.SERVER_URL = "${env.SERVER_URL_DEV}"
                    env.SERVER_SSH_KEY_FILE = "${env.SERVER_SSH_KEY_FILE_DEV}"
                }
                echo "BUILD_ENV: dev"
                echo "TAG: $TAG"
            }
        }

        stage('Production') {
            when {
                branch 'main'
            }
            steps {
                script {
                    env.TAG = 'production'
                    env.SERVER_USERNAME = "${env.SERVER_USERNAME}"
                    env.SERVER_URL = "${env.SERVER_URL}"
                    env.SERVER_SSH_KEY_FILE = "${env.SERVER_SSH_KEY_FILE}"
                    env.SERVICE_NAME = "${env.SERVICE_NAME}"
                }
                echo "BUILD_ENV: production"
                echo "TAG: $TAG"
            }
        }

        stage('Get PR Diff') {
           when {
                expression { return isPullRequest() }
            }
            steps {
                script {
                    sh '''
                        git remote set-branches --add origin main
                        git remote set-branches --add origin dev
                        git fetch --all
                        git fetch origin +refs/pull/*/head:refs/remotes/origin/pr/*
                    '''

                    if (isPullRequest()) {
                        echo "Getting diff for Pull Request #${env.CHANGE_ID}"
                        env.DIFF = sh(
                            script: """
                                git diff origin/${env.CHANGE_TARGET}...origin/pr/${env.CHANGE_ID}
                            """,
                            returnStdout: true
                        ).trim()
                    } else {
                        echo "Getting diff for branch ${env.BRANCH_NAME}"
                        env.DIFF = sh(
                            script: """
                                git diff origin/${env.BRANCH_NAME}
                            """,
                            returnStdout: true
                        ).trim()
                    }
                }
            }
        }

        stage('Ask Groq for Code Review') {
            when {
                expression { return isPullRequest() }
            }
            steps {
                script {
                    catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                        def payload = [
                            model: "llama3-8b-8192",
                            messages: [
                                [role: "system", content: "Bạn là AI code reviewer."],
                                [role: "user", content: "Hãy review đoạn diff sau:\n" + env.DIFF]
                            ]
                        ]

                        def response = httpRequest(
                            httpMode: 'POST',
                            url: 'https://api.groq.com/openai/v1/chat/completions',
                            customHeaders: [
                                [name: 'Authorization', value: "Bearer ${env.GROQ_API_KEY}"],
                                [name: 'Content-Type', value: 'application/json']
                            ],
                            requestBody: groovy.json.JsonOutput.toJson(payload),
                            validResponseCodes: '200'
                        )

                        def body = new groovy.json.JsonSlurper().parseText(response.content)
                        env.REVIEW_COMMENT = body.choices[0].message.content
                        echo "Review Comment:\n${env.REVIEW_COMMENT}"
                    }
                }
            }
        }

        stage('Build') {
            steps {
                sh 'chmod +x ./jenkins/scripts/build.sh && ./jenkins/scripts/build.sh'
            }
        }

        stage('Deploy') {
            when {
                allOf {
                    anyOf {
                        branch 'main'
                        branch 'dev'
                    }
                    expression {
                        return env.BUILD_TYPE == 'branch'
                    }
                }
            }
            steps {
                script {
                    sh 'chmod +x ./jenkins/scripts/deploy.sh && ./jenkins/scripts/deploy.sh'
                }
            }
        }
    }

    post {
        always {
            // Chỉ gửi thông báo khi là pull request hoặc khi là branch `main` hoặc `dev`
            script {
                if (isPullRequest() || env.BRANCH_NAME == 'main' || env.BRANCH_NAME == 'dev') {
                    slackSend channel: isPullRequest() ? '#pr-notifications' : '#merge-notifications',
                        color: COLOR_MAP[currentBuild.currentResult],
                        message: "`cicd-jenkins` - *${currentBuild.currentResult}*\n*Changes:*\n${getChangeString()}${isPullRequest() ? "\n*Review*\n${env.REVIEW_COMMENT}" : ""}"
                }
            }
        }
    }
}
